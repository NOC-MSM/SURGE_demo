{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the NEMO SURGE Demonstrator","text":"<p>Description</p> <p>This NEMO version 5.0.1 demonstrator shows how to create a 1-layer baroptropic storm surge model using the AMM12 regional configuration.</p> <p>The instructions can be adapted to any region of the ocean by changing the bathymetry, coordinates, initial conditions and forcing files.</p> <p>Background</p> <p>The coastlines of the United Kingdom are increasingly vulnerable to the impacts of storm surges driven by extreme weather events and rising sea levels. Accurate and efficient regional storm surge simulations are essential for early warning systems, risk assessment, and coastal planning.</p> <p>Single-layer, barotropic storm surge models offer a simplified yet robust framework for simulating sea level responses to atmospheric forcing, such as wind, and sea level pressure and tides, without the added complexity of 3-dimensional processes.</p> <p>This demonstrator adapts the AMM12 reference configuration covering the Northwest European Shelf. The AMM12 regional domain uses a regular lat-lon grid at approximately 12km horizontal resolution and S-coordinates in the vertical rather than z-coordinates. In addition to atmospheric forcing, our adapted AMM12_SURGE configuration is forced with tidal lateral boundary conditions using a flather boundary condition.</p> <p>System Prerequisites</p> <p>We expect the following software to be installed on your local machine or HPC:  * NETCDF * XIOS3 * An arch file for your HPC (this just sets paths to XIOS, netcdf and the compiling option which depends on your compiler) * Python (for the creation of forcing files and analysis of outputs)</p> <p>If you need to install any of the software above, see the Helpful Tip... below.</p> <p>Provided Resources</p> <ul> <li>Topography, coordinates, boundary conditions for the AMM12 reference configuration.</li> <li>Python scripts to create idealised atmospheric forcing, initial conditions and 1-layer domain bathymetry.</li> <li>Namelist to build the 1-layer domain_cfg.nc file from the bathymetry and coordinates file.</li> <li>Namelist for AMM12_SURGE configuration. </li> </ul>"},{"location":"domain/","title":"Domain Creation","text":"<p>Abstract</p> <p>In this second tutorial of the NEMO SURGE demonstrator, we cover the creation of a single active layer <code>domain_cfg.nc</code> input file for the <code>AMM12_SURGE</code> configuration.</p> <p>Bathymetry Creation</p> <p>Before running the <code>DOMAINcfg</code> tool, we first need to create a file containing the bathymetry of the AMM12 reference configuration domain. </p> <p>We do this by running the <code>create_AMM12_SURGE_bathymetry.py</code> Python script in the <code>src/scripts/</code> directory using our <code>env_surge_demo</code> virtual environment as follows:</p> <pre><code>conda activate env_surge_demo\n\ncd SURGE_demo/src/scripts\n\npython3 create_AMM12_SURGE_bathymetry.py\n</code></pre> <p>The script calculates the <code>Bathymetry</code> (m) using the <code>AMM_R12_sco_domcfg.nc</code> stored in the <code>AMM12_SURGE/EXP00</code> run directory and writes this to a new file <code>bathy_meter_AMM12.nc</code> in this directory.</p> <p>DOMAINcfg Input File Preparation</p> <p>Next we need to prepare the namelists and input files for the <code>DOMAINcfg</code> tool.</p> <p>We start by creating a <code>DOMAIN_AMM12_SURGE</code> directory in our <code>AMM12_SURGE/EXP00</code> run directory and adding a link to our newly created bathymetry input file:</p> <pre><code>cd .../SURGE_demo/nemo_5.0.1/cfgs/AMM12_SURGE\nmkdir DOMAIN_AMM12_SURGE\n\ncd DOMAIN_AMM12_SURGE\nln -s ../bathy_meter_AMM12.nc .\n</code></pre> <p>Then, we need to add links to the <code>make_domain_cfg</code> executable and <code>namelist_ref</code> files. We also include a link to the modified <code>namelist_cfg</code> file prepared for this demonstrator in the <code>SURGE_demo/namelists/domain/</code> directory:</p> <pre><code>ln -s ../AMM_R12_sco_domcfg.nc .\nln -s .../SURGE_demo/nemo_5.0.1/tools/DOMAINcfg/BLD/bin/make_domain_cfg.exe .\nln -s .../SURGE_demo/nemo_5.0.1/tools/DOMAINcfg/namelist_ref .\nln -s .../SURGE_demo/namelists/domain/namelist_cfg .\n</code></pre> <p>Finally, we can run the <code>DOMAINcfg</code> tool using the following command:</p> <pre><code>./make_domain_cfg.exe\n</code></pre> <p>This will produce <code>domain_cfg.nc</code> and <code>mesh_mask.nc</code> files in the current directory, so we add links to these in the run directory.</p> <pre><code>cd ..\n\nln -s DOMAIN_AMM12_SURGE/domain_cfg.nc AMM12_SURGE_domcfg.nc .\nln -s DOMAIN_AMM12_SURGE/mesh_mask.nc AMM12_SURGE_mesh_mask.nc .\n</code></pre> <p>Success</p> <p>You have now created the <code>domain_cfg.nc</code> file for our 1-layer barotropic <code>AMM12_SURGE</code> configuration.</p> <p>Next, continue to the third tutorial Atmospheric Forcing Creation  to generate idealised atmospheric forcing using a synthetic storm system.</p>"},{"location":"forcing/","title":"Atmospheric Forcing Creation","text":"<p>Abstract</p> <p>In this third tutorial of the NEMO SURGE demonstrator, we cover the creation of synthetic atmospheric forcing and initial conditions for the <code>AMM12_SURGE</code> configuration.</p> <p>Initial Conditions Preparation</p> <p>We initialised the 1-layer <code>AMM12_SURGE</code> configuration from the constant reference temperature (T = 10\\(^{\\circ}\\)C) and salinity (S = 35 PSU) values included in the simplified Equation of State in NEMO.</p> <p>To generate the file containing the initial temperature and salinity fields, we run the <code>create_AMM12_SURGE_init_state.py</code> Python script using our <code>env_surge_demo</code> virtual environment:</p> <pre><code>conda activate env_surge_demo\n\ncd SURGE_demo/src/scripts\n\npython3 create_AMM12_SURGE_init_state.py\n</code></pre> <p>The script creates constant temperature and salinity fields and writes them to a new file <code>init_state_AMM12_SURGE_y2012.nc</code> in this directory.</p> <p>Synthetic Atmospheric Forcing Preparation</p> <p>Instead of forcing our <code>AMM12_SURGE</code> configuration with the fields provided in <code>flux/</code> directory (SETTE input files), we will generate wind stress and sea level pressure fields for a synthetic storm moving zonally (west to east) across the model domain.</p> <p>To do this, we will use the <code>ParaTC</code> Python package installed in our virtual environment in Getting Started. The ParaTC: Parametric Tropical Cyclones package allows us to create 2-dimensional sea level pressure and wind stress fields by specifying a synthetic storm track, defined by the location &amp; pressure at the storm's centre and the radius of maximum winds. </p> <p>We use the Holland (1980) analytical model of wind and pressure profiles in tropical cyclones and the Vickery et al. (2000) method to calculate the Holland B parameter.</p> <p>The key parameters for the synthetic storm track are as follows:</p> Parameter Value [Unit] <code>lat</code> 50 [degrees N] <code>translation_speed</code> 6.6 [degrees E / day] <code>central_pressure</code> 985 [hPa] <code>ambient_pressure</code> 1010 [hPa] <code>radius_max_winds</code> 60 [km] <p>To calculate the zonal and meridional wind stress from the synthetic wind field, we use the Large and Pond (1982) formulation.</p> <p>To run the <code>create_AMM12_SURGE_idealised_forcing.py</code> Python script using our <code>env_surge_demo</code> virtual environment:</p> <pre><code>python3 create_AMM12_SURGE_idealised_forcing.py\n</code></pre> <p>The script generates separate daily files containing 1-hourly forcing data for zonal wind stress, meridional wind stress and sea level pressure with the following naming convention:</p> Parameter Filename <code>utau</code> amm12_surge_utau_y2012m01d{01-05}.nc <code>vtau</code> amm12_surge_utau_y2012m01d{01-05}.nc <code>somslpre</code> amm12_surge_somslpre_y2012m01d{01-05}.nc <p>Success</p> <p>You have now created the intial conditions and atmospheric forcing files for the <code>AMM12_SURGE</code> configuration.</p> <p>Next, continue to the fourth tutorial Namelists Modifications  to learn how to modify the <code>namelist_cfg</code> file for a 1-layer barotropic model.</p> <p>References</p> <p>Holland, G. J., 1980: An analytical model of the wind and pressure profiles in hurricanes. Mon. Wea. Rev., 108 , 1212\u20131218.</p> <p>Large, W. G., and S. Pond, 1982: Sensible and Latent Heat Flux Measurements over the Ocean. J. Phys. Oceanogr., 12, 464\u2013482.</p> <p>Vickery, P. J., P. F. Skerlj, A. C. Steckley, and L. A. Twisdale, 2000: Hurricane wind field model for use in hurricane simulations. J. Struct. Eng., 126 , 1203\u20131221.</p>"},{"location":"getting_started/","title":"Getting Started","text":"<p>Abstract</p> <p>In this opening tutorial, we cover the installation of the dependencies required to follow the NEMO SURGE demonstrator.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>To get started, clone the SURGE_demo repository from GitHub:</p> <pre><code>git clone git@github.com:NOC-MSM/SURGE_demo.git\n</code></pre> <p>Next, clone NEMO v5.0.1 inside the <code>SURGE_demo</code> directory:</p> <pre><code>cd SURGE_demo\n\ngit clone --branch 5.0.1 https://forge.nemo-ocean.eu/nemo/nemo.git nemo_5.0.1\n</code></pre> <p>Note: above we assume that you have already installed the NEMO system-prerequisites on your machine. If this is not the case, see the Helpful Tip... below.</p> Helpful Tip... <p>To automate the installation of NEMO and its dependencies (e.g., XIOS2/3, NETCDF, HDF5) on your local machine, we have provided a shell script in the <code>tools</code> directory. </p>"},{"location":"getting_started/#compiling-nemo","title":"Compiling NEMO","text":"<p>Now we have cloned NEMO v5.0.1, we next need to compile NEMO on our local machine or HPC.</p> <p>Let's first look at the contents of the <code>nemo_5.0.1</code> directory:</p> <pre><code>cd nemo_5.0.1\n</code></pre> Directory Description <code>arch</code> contains the compilation settings <code>cfgs</code> contains the reference configurations, including <code>AMM12</code> <code>doc</code> contains useful documentation <code>ext</code> includes NEMO dependencies <code>mk</code> includes compilation scripts <code>src</code> includes the NEMO .F90 model routines can be found <code>tests</code> includes idealized test-cases <code>tools</code> includes pre and post processing tools <p>We can automatically set-up an Arch file using <code>build_arch-auto.sh</code> to create an arch file called <code>arch-auto.fcm</code>:</p> <pre><code>cd arch\n\n./build_arch-auto.sh\n</code></pre> <p>Alternatively, we could modify an existing arch file in the <code>arch</code> directory, making sure the variables: <code>%NCDF_HOME</code>; <code>%HDF5_HOME</code> and <code>%XIOS_HOME</code> should be set to the installation directories used for XIOS installation.</p> <p>We can now use <code>makenemo</code> to compile the <code>AMM12</code> reference configuration:</p> <pre><code>cd  nemo_5.0.1\n\n./makenemo -m 'Anemone-ifort-xios3' -j 32 -r 'AMM12' -n 'AMM12_SURGE'\n</code></pre> Helpful Tip... <p>To use XIOS3, we must first update the list of active CPP keys in the <code>AMM12</code> reference configuration <code>.../SURGE_demo/nemo_5.0.1/cfgs/AMM12/cpp_AMM12.fcm</code> file to include the <code>key_xios3</code> key in addition to <code>key_xios</code>. Otherwise, we will encounter an error during compilation.</p> <p>In the example above, we use the <code>arch/NOC/arch-Anemone-ifort-xios3.fcm</code> file.</p> <p>The <code>AMM12_SURGE</code> configuration is now compiled in the <code>nemo_5.0.1/cfgs/AMM12_SURGE</code> directory with the following sub-directories:</p> Directory Description <code>BLD</code> BuiLD directory: target executable, libraries, preprocessed routines, \u2026 <code>EXP00</code> Run directory: link to executable, namelists, *.xml and IOs <code>EXPREF</code> Files under version control only for official configurations <code>MY_SRC</code> Your new routines or your modified copies of NEMO sources <code>WORK</code> Links to all fortran routines that you will compile"},{"location":"getting_started/#compiling-domaincfg-tool","title":"Compiling DOMAINcfg tool","text":"<p>Now we have compiled our <code>AMM12_SURGE</code> configuration, we next need to compile the NEMO DOMAINcfg tool on our local machine or HPC.</p> <p>Before compiling, we first need to modify the <code>zgr_sco</code> subroutine in <code>domzgr.F90</code> file to handle the creation of a 1-layer S-coordinate <code>domain_cfg.nc</code> file.</p> <p>On Line 1481 <code>SURGE_demo/nemo_5.0.1/tools/DOMAIN_cfg/src/domzgr.F90</code>:</p> <pre><code>      ! HYBRID : \n      DO jj = 1, jpj\n         DO ji = 1, jpi\n            DO jk = 1, jpkm1\n               ! Modify MAX( 2, jk ) to MAX( 1, jk ) - Jerome Chanut (April 2022):\n               IF( scobot(ji,jj) &gt;= gdept_0(ji,jj,jk) )   mbathy(ji,jj) = MAX( 1, jk )\n            END DO\n         END DO\n      END DO\n</code></pre> <p>Then, we can compile our modified DOMAINcfg tool using <code>maketools</code>:</p> <pre><code>cd  nemo_5.0.1/tools\n\n./maketools -m Anemone-ifort-xios3 -j 16 -n DOMAINcfg\n</code></pre> <p>The DOMAINcfg tool is now compiled.</p>"},{"location":"getting_started/#downloading-amm12-ancillary-files","title":"Downloading AMM12 ancillary files:","text":"<p>We now need to download the ancillary files (topography, domain, boundary and atmospheric forcing) for the AMM12 reference configuration used for SETTE testing.</p> <p>In our <code>EXP00</code> run directory, let's download and uncompress the tarball of input files:</p> <pre><code>cd ../cfgs/AMM12_SURGE/EXP00/\n\nwget \"https://gws-access.jasmin.ac.uk/public/nemo/sette_inputs/r5.0.0/AMM12_v5.0.0.tar.gz\"\n\ntar -xvf AMM12_v5.0.0.tar.gz\n\ncd AMM12_v5.0.0\n\nmv * ..\nrm -rf AMM12_v5.0.0\n</code></pre>"},{"location":"getting_started/#creating-a-python-virtual-environment","title":"Creating a Python virtual environment:","text":"<p>To run the Python scripts provided for the creation of bathymetry, initial conditions and idealised atmospheric forcing, we first need to create a virtual environment.</p> <p>!!! info Option 1: venv + pip</p> <pre><code>```sh\npython3 -m venv env_surge_demo\n\nsource env_surge_demo/bin/activate\n\npip install --upgrade pip\npip install -r requirements.txt\n\ndeactivate\n```\n</code></pre> <p>!!! info Option 2: conda</p> <pre><code>```sh\nconda env create -f environment.yml\n\nsource \"$(conda info --base)/etc/profile.d/conda.sh\"\n\nconda activate env_surge_demo\n```\n</code></pre> <p>Success</p> <p>You have now compiled and downloaded all of the ingredients needed to create our <code>AMM12_SURGE</code> domain, initial conditions &amp; forcing ancillary files.</p> <p>Next, continue to the second tutorial Domain Creation  to create the <code>domain_cfg.nc</code> file for our 1-layer model.</p>"},{"location":"namelist/","title":"Namelists Modifications","text":"<p>Abstract</p> <p>In this fourth tutorial of the NEMO SURGE demonstrator, we cover the changes to the <code>namelist_cfg</code> required to perform the <code>AMM12_surge</code> example simulation.</p> <p>Namelist</p> <p>Below we discuss the important changes to the <code>namelist_cfg</code> required for the AMM12 1-layer barotropic storm surge model.</p> <p>Two modified <code>namelist_cfg</code> files are available in the <code>SURGE_demo/namelists/nemo/</code> directory.</p> <p>Let's add links to these files in our run directory:</p> <pre><code>cd nemo_5.0.1/cfgs/AMM12_SURGE/EXP00/\n\nln -s .../SURGE_demo/namelists/nemo/namelist_cdf_SURGE .\nln -s .../SURGE_demo/namelists/nemo/namelist_cdf_SURGE_NO_TIDES .\n</code></pre> <p>Temperature &amp; Salinity (&amp;namtsd)</p> <ul> <li>Initialise our 1-layer regional model using constant temperature (10 degrees C) and salinity (35 PSU) from the <code>init_state_AMM12_SURGE_y2012.nc</code> file created in Atmospheric Forcing Creation .</li> </ul> <pre><code>!-----------------------------------------------------------------------\n&amp;namtsd        !    Temperature &amp; Salinity Data  (init/dmp)             (default: OFF)\n!-----------------------------------------------------------------------\n   !                       ! =T  read T-S fields for:\n   ln_tsd_init = .true.         !  ocean initialisation\n   ln_tsd_dmp  = .false.         !  T-S restoring   (see namtra_dmp)\n\n   cn_dir      = './'      !  root directory for the T-S data location\n   !___________!_________________________!___________________!___________!_____________!________!___________!__________________!__________!_______________!\n   !           !  file name              ! frequency (hours) ! variable  ! time interp.!  clim  ! 'yearly'/ ! weights filename ! rotation ! land/sea mask !\n   !           !                         !  (if &lt;0  months)  !   name    !   (logical) !  (T/F) ! 'monthly' !                  ! pairing  !    filename   !\n   sn_tem = 'init_state_AMM12_SURGE',  -1.     , 'votemper',   .false.    , .false. , 'yearly'  ,    ''            ,    ''    ,    ''\n   sn_sal = 'init_state_AMM12_SURGE',  -1.     , 'vosaline',   .false.    , .false. , 'yearly'  ,    ''            ,    ''    ,    ''\n/\n</code></pre> <p>Surface Boundary Conditions (&amp;namsbc)</p> <ul> <li> <p>Use flux formulation to impose surface boundary conditions (<code>ln_flx</code>) and take the atmospheric pressure into account when computing the surface pressure gradient (<code>ln_apr_dyn</code>). </p> </li> <li> <p>Hourly zonal (<code>utau</code>) and meridional (<code>vtau</code>) wind stress is read from daily files generated in Atmospheric Forcing Creation .</p> </li> <li> <p>Dummy surface heat (0 W m-2) and freshwater fluxes (0 kg s-1 m-2) are read as climatologies from annual file.</p> </li> </ul> <pre><code>!-----------------------------------------------------------------------\n&amp;namsbc        !   Surface Boundary Condition (surface module)          (default: NO selection)\n!-----------------------------------------------------------------------\n   nn_fsbc     = 1         !  frequency of SBC module call\n   ln_flx      = .true.    !  flux formulation                          (T =&gt; fill namsbc_flx)\n   ln_traqsr   = .false.   !  Light penetration in the ocean            (T =&gt; fill namtra_qsr)\n   ln_ssr      = .false.   !  Sea Surface Restoring on T and/or S       (T =&gt; fill namsbc_ssr)\n   ln_rnf      = .false.   !  runoffs                                   (T =&gt; fill namsbc_rnf)\n   ln_apr_dyn  = .true.    !  Patm gradient added in ocean &amp; ice Eqs.   (T =&gt; fill namsbc_apr )\n/\n!-----------------------------------------------------------------------\n&amp;namsbc_flx    !   surface boundary condition : flux formulation\n!-----------------------------------------------------------------------\n   cn_dir      = './fluxes/'  !  root directory for the fluxes data location\n   !___________!_________________________!___________________!___________!_____________!________!___________!__________________!__________!_______________!\n   !           !  file name              ! frequency (hours) ! variable  ! time interp.!  clim  ! 'yearly'/ ! weights filename ! rotation ! land/sea mask !\n   !           !                         !  (if &lt;0  months)  !   name    !   (logical) !  (T/F) ! 'monthly' !                  ! pairing  !    filename   !\n   sn_utau     = 'amm12_surge_utau'      ,          1.       , 'utau'    ,  .true.     , .false., 'daily'   ,  ''              ,  ''      , ''\n   sn_vtau     = 'amm12_surge_vtau'      ,          1.       , 'vtau'    ,  .true.     , .false., 'daily'   ,  ''              ,  ''      , ''\n   sn_qtot     = 'AMM12_SURGE_dummy_flx' ,          -12      , 'sonsfldo',  .false.    , .true. , 'yearly'   ,  ''              ,  ''      , ''\n   sn_qsr      = 'AMM12_SURGE_dummy_flx' ,          -12      , 'soshfldo',  .false.    , .true. , 'yearly'   ,  ''              ,  ''      , ''\n   sn_emp      = 'AMM12_SURGE_dummy_flx' ,          -12      , 'sowafldo',  .false.    , .true. , 'yearly'   ,  ''              ,  ''      , ''\n/\n</code></pre> <ul> <li> <p>Transform atmospheric pressure into an equivalent inverse barometer sea surface height.</p> </li> <li> <p>Hourly mean sea level pressure is read from daily files generated in Atmospheric Forcing Creation .</p> </li> </ul> <pre><code>!-----------------------------------------------------------------------\n&amp;namsbc_apr    !   Atmospheric pressure used as ocean forcing           (ln_apr_dyn =T)\n!-----------------------------------------------------------------------\n   rn_pref     = 101000.   !  reference atmospheric pressure   [N/m2]/\n   nn_ref_apr  =   0       !  ref. pressure: 0: constant, 1: global mean or 2: read in a file\n   ln_apr_obc  = .true.    !  inverse barometer added to OBC ssh data\n\n   cn_dir = './fluxes/'    !  root directory for the Patm data location\n   !___________!_________________________!___________________!___________!_____________!________!___________!__________________!__________!_______________!\n   !           !  file name              ! frequency (hours) ! variable  ! time interp.!  clim  ! 'yearly'/ ! weights filename ! rotation ! land/sea mask !\n   !           !                         !  (if &lt;0  months)  !   name    !   (logical) !  (T/F) ! 'monthly' !                  ! pairing  !    filename   !\n   sn_apr      = 'amm12_surge_somslpre'  ,          1.       ,'somslpre' ,   .true.    , .false., 'daily'  ,    ''            ,    ''    ,      ''\n/\n</code></pre> <p>Tides (&amp;nam_tide)</p> <ul> <li> <p>Activate tidal forcing, including tidal potential, on the domain boundaries.</p> </li> <li> <p>Use a linear ramp to introduce the tides over the duration of 1-day.</p> </li> </ul> <pre><code>!-----------------------------------------------------------------------\n&amp;nam_tide      !   tide parameters                                      (default: OFF)\n!-----------------------------------------------------------------------\n   ln_tide     = .true.        ! Activate tides\n   ln_tide_pot = .true. !  use tidal potential forcing\n   sn_tide_cnames(1)  = 'Q1'   !  name of constituent\n   sn_tide_cnames(2)  = 'O1'\n   sn_tide_cnames(3)  = 'P1'\n   sn_tide_cnames(4)  = 'S1'\n   sn_tide_cnames(5)  = 'K1'\n   sn_tide_cnames(6)  = '2N2'\n   sn_tide_cnames(7)  = 'MU2'\n   sn_tide_cnames(8)  = 'N2'\n   sn_tide_cnames(9)  = 'NU2'\n   sn_tide_cnames(10) = 'M2'\n   sn_tide_cnames(11) = 'L2'\n   sn_tide_cnames(12) = 'T2'\n   sn_tide_cnames(13) = 'S2'\n   sn_tide_cnames(14) = 'K2'\n   sn_tide_cnames(15) = 'M4'\n\n   ln_tide_ramp  = .true.               !  Use linear ramp for tides at startup\n   rn_tide_ramp_dt = 1.               !  ramp duration in days\n/\n</code></pre> <p>Unstructured Open Boundaries (&amp;nambdy)</p> <ul> <li> <p>Use Flather radiation scheme for the barotropic variables <code>cn_dyn2d = 'flather'</code>.</p> </li> <li> <p>Use tidal harmonic forcing without external tidal data.</p> </li> <li> <p>Use the Flow Relaxation Scheme (FRS) for all variables (<code>cn_tra</code>, <code>cn_dyn3d</code>) &amp; set bdy data equal to the initial state (<code>nn_tra_dta = 0</code>).</p> </li> </ul> <pre><code>!-----------------------------------------------------------------------\n&amp;nambdy        !  unstructured open boundaries                          (default: OFF)\n!-----------------------------------------------------------------------\n    ln_bdy     = .true.   !  Use unstructured open boundaries\n    nb_bdy     =  1       !  number of open boundary sets\n    !\n    cn_dyn2d     = 'flather'\n    nn_dyn2d_dta =  2\n    cn_tra       = 'frs'\n    nn_tra_dta   =  0 \n    cn_dyn3d     = 'frs' \n/\n</code></pre> <p>Bottom Drag (&amp;namdrg)</p> <ul> <li>Use non-linear bottom friction parameterisation assuming quadratic bottom friction.</li> </ul> <pre><code>!-----------------------------------------------------------------------\n&amp;namdrg        !   top/bottom drag coefficient                          (default: NO selection)\n!-----------------------------------------------------------------------\n! Quadratic\n   ln_non_lin  = .true.      !  non-linear drag coefficient\n   ln_loglayer = .false.     !  logarithmic drag: Cd = vkarmn/log(z/z0) |U|\n/\n</code></pre> <p>Equation Of Seawater (&amp;nameos)</p> <ul> <li>Use simplified Equation of State for Seawater with reference temperature and salinity consistent with initial conditions.</li> </ul> <pre><code>!-----------------------------------------------------------------------\n&amp;nameos        !   ocean Equation Of Seawater                           (default: NO selection)\n!-----------------------------------------------------------------------\n   ln_teos10   = .false.         ! = Use TEOS-10 equation of state\n   ln_seos     = .true.          ! = Simplified EOS.\n   rn_T0       = 10.             !  reference temperature\n   rn_S0       = 35.             !  reference salinity\n/\n</code></pre> <p>Tracer Lateral Diffusion (&amp;namtra_ldf)</p> <ul> <li>Turn off lateral mixing - lateral diffusive tendency will not be applied to the tracer equation.</li> </ul> <pre><code>!-----------------------------------------------------------------------\n&amp;namtra_ldf    !   lateral diffusion scheme for tracers                 (default: NO selection)\n!-----------------------------------------------------------------------\n   ln_traldf_OFF   =  .true.   !  No explicit diffusion\n   ln_traldf_lap   =  .false.   !    laplacian operator\n   ln_traldf_hor   =  .true.   !  horizontal (geopotential)\n   !                       !  Coefficients:\n   nn_aht_ijk_t    = 0         !  =  0   constant = 1/2  Ud*Ld   (lap case) \n      rn_Ud        = 0.01           !  lateral diffusive velocity [m/s] (nn_aht_ijk_t= 0, 10, 20, 30)\n      rn_Ld        = 10.e+3         !  lateral diffusive length   [m]   (nn_aht_ijk_t= 0, 10)\n/\n</code></pre> <p>Hydrostatic Pressure Gradient (&amp;namdyn_hpg)</p> <ul> <li>Use standard Jacobian formulation for pressure gradient with a generalised s(x, y, z, t) coordinates.</li> </ul> <pre><code>!-----------------------------------------------------------------------\n&amp;namdyn_hpg    !   Hydrostatic pressure gradient option                 (default: NO selection)\n!-----------------------------------------------------------------------\n   ln_hpg_prj  = .false.    !  s-coordinate (Pressure Jacobian scheme)\n   ln_hpg_sco  = .true.     !  s-coordinate (standard jacobian formulation)\n/\n</code></pre> <p>Vertical Physics (&amp;namzdf)</p> <ul> <li>Do not compute the vertical eddy viscosity and diffusivity coefficients using the Generic Length Scale (GLS) scheme <code>ln_zdfgls = .false.</code>.</li> </ul> <pre><code>!-----------------------------------------------------------------------\n&amp;namzdf        !   vertical physics                                     (default: NO selection)\n!-----------------------------------------------------------------------\n   ln_zdfgls   = .false.     !  Generic Length Scale closure              (T =&gt;   fill namzdf_gls)\n   ln_zdfcst   = .true.      !  constant mixing\n   !                       ! coefficients\n   rn_avm0     =   0.1e-6     !  vertical eddy viscosity   [m2/s]       (background Kz if ln_zdfcst=F)\n   rn_avt0     =   0.1e-6     !  vertical eddy diffusivity [m2/s]       (background Kz if ln_zdfcst=F)\n   nn_avb      =    0         !  profile for background avt &amp; avm (=1) or not (=0)\n   nn_havtb    =    0         !  horizontal shape for avtb (=1) or not (=0)\n/\n</code></pre> <p>Success</p> <p>You have now modified the <code>namelist_cfg</code> file for the case of a 1-layer barotropic model.</p> <p>Next, continue to the fifth tutorial Running AMM12_SURGE  to learn how to run a simulation both with and without tidal boundary forcing.</p>"},{"location":"outputs/","title":"AMM12_SURGE Outputs","text":"<p>Abstract</p> <p>In this final sixth tutorial of the NEMO SURGE demonstrator, we cover visualising the outputs of our <code>AMM12_surge</code> example simulation.</p> <p>Creating Animations of Atmospheric Forcing &amp; SSH</p> <p>Now we have completed our <code>AMM12_SURGE</code> configuration, we next show how to produce animations of the atmospheric pressure of our synthetic storm and the sea surface height anomaly both with and without tidal forcing along the boundaries of our domain.</p> <p>To produce the animations below, we have prodvided the <code>create_gifs_outputs_final.py</code> script, which can be run using our <code>env_surge_demo</code> virtual environment as follows:</p> <pre><code>conda activate env_surge_demo\n\ncd .../SURGE_demo/src/scripts\n\npython3 create_gifs_output_final.py\n</code></pre> <p></p> <p>Tidal Forcing</p> <p></p> <p>Atmospheric Pressure</p> <p></p> <p>Winds + Atmospheric Pressure</p>"},{"location":"run/","title":"Running AMM12_SURGE","text":"<p>Abstract</p> <p>In this fifth tutorial of the NEMO SURGE demonstrator, we cover how to run the <code>AMM12_surge</code> simulation with both atmosheric forcing and tidal forcing along the boundaries.</p>"},{"location":"run/#output","title":"Output","text":"<p>Now we have prepared the <code>domain_cfg</code>, initial conditions, atmospheric forcing and <code>namelist_cfg</code> for our <code>AMM12_SURGE</code> configuration, we next need to update the XIOS <code>.xml</code> files used to specify the output files of our simulation.</p> <p>In our <code>AMM12_SURGE/EXP00/</code> run directory, we do the following:</p> <pre><code>cd .../SURGE_demo/nemo_5.0.1/cfgs/AMM12_SURGE/EXP00/\n\nrm file_def_nemo-oce.xml\nln -s .../SURGE_demo/namelists/XIOS/file_def_nemo-oce_SURGE.xml file_def_nemo-oce.xml\n</code></pre>"},{"location":"run/#running-nemo","title":"Running NEMO","text":"<p>Finally, we can run our <code>AMM12_SURGE</code> configuration using the NEMO executable on a single processor on our local machine or HPC:</p> <pre><code>./nemo\n</code></pre>"}]}